(function (global) {
Â  'use strict';

Â  if (global.__SecoesReady) {
Â  Â  console.log('[Secoes] JÃ¡ carregado, ignorando');
Â  Â  return;
Â  }
Â  global.__SecoesReady = true;

Â  const log = (...args) => console.log('[Secoes]', ...args);
Â  const $ = s => document.querySelector(s);
Â  const $$ = s => document.querySelectorAll(s);

Â  // VariÃ¡vel de controle para transiÃ§Ãµes
Â  let isTransitioning = false;
Â  
Â  // O helper goNext, que vocÃª jÃ¡ tem, usa global.playTransition.
Â  // Vamos garantir que ele caia corretamente no fallback se for preciso.
Â  const getPlayTransitionFn = () => global.playTransition || global.JSecoes?.playTransition || function(src, onEnd) { 
Â  Â  log('playTransition indisponÃ­vel. AvanÃ§ando diretamente.'); 
Â  Â  onEnd && onEnd();
Â  };
Â  
Â  // ===== Pergaminho & Canvas =====
Â  // Mantido o bloco original, removendo apenas o cÃ³digo redundante/duplicado de "guarda"
Â  function checkImage(url, fallbackUrl) {
Â  Â  return new Promise(resolve => {
Â  Â  Â  const img = new Image();
Â  Â  Â  img.onload = () => resolve(url);
Â  Â  Â  img.onerror = () => resolve(fallbackUrl);
Â  Â  Â  img.src = url;
Â  Â  });
Â  }

function updateCanvasBackground(sectionId) {
Â  const canvas = $('#jornada-canvas');
Â  if (!canvas || !sectionId) {
Â  Â  log('Canvas ou sectionId nÃ£o encontrados, ignorando');
Â  Â  return;
Â  }
Â  const section = document.getElementById(sectionId);
Â  if (!section) {
Â  Â  log(`SeÃ§Ã£o ${sectionId} nÃ£o encontrada, ignorando canvas update`);
Â  Â  return;
Â  }
Â  if (sectionId === 'section-perguntas') {
Â  Â  checkImage('/assets/img/pergaminho-rasgado-horiz.png', '/assets/img/pergaminho-rasgado-vert.png').then(bg => {
Â  Â  Â  // Corrigido a classe para limpar o pergaminho-v ao ir para a horizontal (H)
Â  Â  Â  canvas.className = `card pergaminho pergaminho-h${bg.includes('vert') ? ' fallback' : ''}`;
Â  Â  Â  canvas.style.background = `var(--panel) url('${bg}') no-repeat center/cover`;
Â  Â  Â  log('Canvas atualizado para section-perguntas:', bg);
Â  Â  });
Â  } else {
Â  Â  canvas.className = 'card pergaminho pergaminho-v'; // Volta para o Vertical (V)
Â  Â  canvas.style.background = 'var(--panel) url(/assets/img/pergaminho-rasgado-vert.png) no-repeat center/cover';
Â  Â  log('Canvas atualizado para:', sectionId);
Â  }
}
// Vincula o canvas ao evento de carregamento da seÃ§Ã£o
document.addEventListener('sectionLoaded', (e) => updateCanvasBackground(e.detail.sectionId));
document.addEventListener('section:shown', (e) => updateCanvasBackground(e.detail.sectionId));


Â  // ===== Blocos DinÃ¢micos e Controles (Mantidos) =====
Â  // Todas as funÃ§Ãµes 'loadDynamicBlocks' atÃ© 'fetchDevolutiva' foram mantidas
Â  // sem alteraÃ§Ãµes, pois nÃ£o causam conflito de escopo.

Â  // ... (CÃ³digo de loadDynamicBlocks, analyzeSentiment, handleInput, fetchDevolutiva) ...

Â  // ===== Controles (Bloco DinÃ¢mico - Mantido) =====
Â  function loadDynamicBlocks() {
Â  Â  const content = $('#perguntas-container');
Â  Â  if (!content) {
Â  Â  Â  log('Container de perguntas nÃ£o encontrado');
Â  Â  Â  return;
Â  Â  }

Â  Â  const blocks = window.JORNADA_BLOCKS || [];
Â  Â  content.innerHTML = '';

Â  Â  blocks.forEach((block, bIdx) => {
Â  Â  Â  const bloco = document.createElement('section');
Â  Â  Â  bloco.className = 'j-bloco';
Â  Â  Â  bloco.id = `bloco-${block.id || bIdx}`;
Â  Â  Â  bloco.dataset.bloco = bIdx;
Â  Â  Â  bloco.dataset.video = block.video_after || '';

Â  Â  Â  (block.questions || []).forEach((q, qIdx) => {
Â  Â  Â  Â  const label = typeof q === 'string' ? q : (q.label || q.text || '');
Â  Â  Â  Â  const div = document.createElement('div');
Â  Â  Â  Â  div.className = 'j-pergunta';
Â  Â  Â  Â  div.dataset.pergunta = qIdx;

Â  Â  Â  Â  const enunciado =
Â  Â  Â  Â  Â  `<label class="pergunta-enunciado" ` +
Â  Â  Â  Â  Â  `data-typing="true" data-text="Pergunta ${qIdx + 1}: ${label}" ` +
Â  Â  Â  Â  Â  `data-speed="36" data-cursor="true"></label>`;

Â  Â  Â  Â  div.innerHTML = enunciado +
Â  Â  Â  Â  Â  `\n<textarea rows="4" class="input" placeholder="Digite sua resposta..."></textarea>` +
Â  Â  Â  Â  Â  `<div class="devolutiva-container" style="display:none;"><p data-typing="true" data-speed="36" data-cursor="true"></p></div>` +
Â  Â  Â  Â  Â  `<div class="accessibility-controls">` +
Â  Â  Â  Â  Â  `<button class="btn-mic" data-action="start-mic">ðŸŽ¤ Falar Resposta</button>` +
Â  Â  Â  Â  Â  `<button class="btn-audio" data-action="read-question">ðŸ”Š Ler Pergunta</button>` +
Â  Â  Â  Â  Â  `</div>`;

Â  Â  Â  Â  bloco.appendChild(div);
Â  Â  Â  });

Â  Â  Â  content.appendChild(bloco);
Â  Â  });

Â  Â  const firstBloco = content.querySelector('.j-bloco');
Â  Â  if (firstBloco) {
Â  Â  Â  firstBloco.style.display = 'block';
Â  Â  Â  const first = firstBloco.querySelector('.j-pergunta');
Â  Â  Â  if (first && global.runTyping) {
Â  Â  Â  Â  first.classList.add('active');
Â  Â  Â  Â  global.runTyping(first.querySelector('.pergunta-enunciado'), first.querySelector('.pergunta-enunciado').dataset.text, () => {
Â  Â  Â  Â  Â  log('Datilografia concluÃ­da para primeira pergunta');
Â  Â  Â  Â  });
Â  Â  Â  }
Â  Â  }

Â  Â  global.JGuiaSelfie && global.JGuiaSelfie.loadAnswers();
Â  Â  const firstTa = content.querySelector('.j-bloco .j-pergunta textarea');
Â  Â  if (firstTa) handleInput(firstTa);
Â  Â  log('Blocos dinÃ¢micos carregados:', blocks.length);
Â  }

Â  // ... (CÃ³digo de analyzeSentiment, handleInput, fetchDevolutiva, toggleSenha) ...

Â  // ===== LÃ³gicas de AvanÃ§o (Mantidas) =====
Â  function proceedAfterGuia(guia) {
Â  Â  const guiaNameInput = $('#guiaNameInput');
Â  Â  // ... (lÃ³gica de nome e avanÃ§o para section-selfie) ...
Â  }

Â  function proceedAfterSelfie() {
Â  Â  const intro = window.JORNADA_VIDEOS?.intro || '';
Â  Â  if (!intro || window.__introPlayed) {
Â  Â  Â  proceedToQuestions();
Â  Â  Â  return;
Â  Â  }
Â  Â  window.__introPlayed = true;
Â  Â  const _play = getPlayTransitionFn();
Â  Â  _play(intro, () => proceedToQuestions());
Â  }

Â  function proceedToQuestions() {
Â  Â  // ... (lÃ³gica para carregar section-perguntas) ...
Â  }

Â  // ===== goNext (LÃ³gica de AvanÃ§o de Perguntas/Blocos - Mantida) =====
Â  function goNext() {
Â  Â  if (isTransitioning) {
Â  Â  Â  log('TransiÃ§Ã£o em andamento, ignorando');
Â  Â  Â  return;
Â  Â  }
Â  Â  isTransitioning = true;
Â  Â  // ... (lÃ³gica completa de avanÃ§o entre perguntas/blocos) ...
Â  Â  
Â  Â  // Bloco de transiÃ§Ã£o de vÃ­deo entre blocos
Â  Â  const src = (window.JORNADA_BLOCKS[idxBloco] && window.JORNADA_BLOCKS[idxBloco].video_after) || '';
Â  Â  Â if (src) {
Â  Â  const _play = getPlayTransitionFn();
Â  Â  _play(src, () => irAdiante());
Â  } else {
Â  Â  irAdiante();
Â  }
Â  Â  // ... (cÃ³digo de datilografia em excesso removido) ...
Â  }
Â  
Â  // ===== VÃ­deo de TransiÃ§Ã£o (Redundante no seu setup, mas exportada para uso) =====
Â  // Mantenho a funÃ§Ã£o playTransition aqui caso vocÃª a use como fallback ou a chame internamente,
Â  // mas idealmente ela deve ser APENAS no arquivo 'video-transicao.js'

Â  // ... (cÃ³digo de playTransition, lockVideoOrientation, generatePDF mantidos) ...
Â  
Â  // ===== InicializaÃ§Ã£o =====
Â  function initSecoes() {
Â  Â  lockVideoOrientation();
Â  Â  // Sincroniza o manuseio de inputs para que respostas salvem e atualizem a chama/progresso
Â  Â  $$('.j-pergunta textarea').forEach(input => {
Â  Â  Â  input.addEventListener('input', () => handleInput(input));
Â  Â  });
Â  Â  // ... (lÃ³gica de input de senha mantida) ...
Â  Â  log('Secoes inicializado');
Â  }

Â  document.addEventListener('DOMContentLoaded', initSecoes);

Â  // ===== startJourney (CORRIGIDO PARA COMEÃ‡AR NA INTRO) =====
Â  function startJourney() {
Â  Â  const next = 'section-intro'; // A Jornada SEMPRE comeÃ§a na IntroduÃ§Ã£o
Â  Â  if (global.JC && typeof global.JC.show === 'function') {
Â  Â  Â  console.log('[JSecoes] startJourney â†’', next);
Â  Â  Â  global.JC.show(next);
Â  Â  } else if (typeof global.showSection === 'function') {
Â  Â  Â  console.log('[JSecoes] startJourney (fallback showSection) â†’', next);
Â  Â  Â  global.showSection(next);
Â  Â  } else {
Â  Â  Â  global.toast && global.toast('NavegaÃ§Ã£o indisponÃ­vel (JC/showSection).');
Â  Â  Â  return;
Â  Â  }

Â  Â  global.G = global.G || {};
Â  Â  global.G.__typingLock = false;
Â  }

Â  // ===== Export pÃºblico =====
Â  global.JSecoes = {
Â  Â  checkImage,
Â  Â  updateCanvasBackground,
Â  Â  loadDynamicBlocks,
Â  Â  analyzeSentiment,
Â  Â  handleInput,
Â  Â  toggleSenha,
Â  Â  proceedAfterGuia,
Â  Â  proceedAfterSelfie,
Â  Â  proceedToQuestions,
Â  Â  goNext,
Â  Â  playTransition, // Mantido como export para compatibilidade
Â  Â  generatePDF,
Â  Â  startJourney
Â  };

})(window)
